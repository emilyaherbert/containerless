# Namespace for Containerless
# This is a template for a Kubernetes configuration that creates static
# resources for Containerless. The template has several variables:
# - $CONTROLLER_IP and $CONTROLLER_PORT are the IP address and port at which the
#   the controller is running, and must be reachable by pods running in
#   Kubernetes.
# - $CONTROLLER_LOG_PATH is the path on the local machine where the controller
#   log appears.
#
# The template creates the following resources:
# - A namespace called "containerless".
# - An endpoint and service, both called "controller", which allow pods in
#   the cluster to communicate with the controller using http://controller:80.
# - A service called "dispatcher" that selects pods with selector
#   "app=dispatcher". The service makes dispatchers available in the cluster
#   at http://dispatcher:8080. (Yes, we use different ports. This is bad, and
#   we should fix it!)
# - A replicaSet and service, both called "storage", that runs the function
#   storage agent. We have a really trivial storage service that does not
#   support replication. However, the replicaSet ensures that it restarts
#   if anything goes wrong. (Is that even desirable?) The service makes
#   function storage available in the cluster at http://storage:8080.
# - An ingress that runs at port 80, and exposes /storage, /dispatcher, and
#   /controller outside the cluster.
# - A pod called controller-logger that echoes the controller's log file to
#   its own output. Thus, even when the controller is running outside of
#   the cluster, its logs are available in the cluster and can be aggregated
#   with all other logs.
# Assumptions:
# - The controller-logger pod must run on the same machine -- so that it can
#   share the file system with the controller.
apiVersion: v1
kind: Namespace
metadata:
    name: containerless
---
apiVersion: v1
kind: Endpoints
metadata:
  name: controller
  namespace: containerless
subsets:
  - addresses:
    - ip: $CONTROLLER_IP
    ports:
    - port: $CONTROLLER_PORT
      name: http
---
apiVersion: v1
kind: Service
metadata:
  name: controller
  namespace: containerless
  labels:
    app: controller
spec:
  ports:
    - name: http
      port: 80
      targetPort: $CONTROLLER_PORT
---
apiVersion: v1
kind: Service
metadata:
  name: dispatcher
  namespace: containerless
  labels:
    app: dispatcher
spec:
  type: NodePort
  selector:
    app: dispatcher
  ports:
    - name: http
      port: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: containerless-external
  namespace: containerless
  labels:
    app: dispatcher
spec:
  type: LoadBalancer
  clusterIP: 10.152.183.131
  externalTrafficPolicy: Cluster
  ports:
    - nodePort: 30386
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: dispatcher
  sessionAffinity: None
---
# This ReplicaSet runs function storage. Note that the number of replicates
# must be exactly 1. The function-storage-agent is not designed to be
# replicated.
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: storage
  namespace: containerless
  labels:
    app: storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: storage
  template:
    metadata:
      labels:
        app: storage
    spec:
      containers:
      - name: storage
        image: localhost:32000/function-storage
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: storage
  namespace: containerless
  labels:
    app: storage
spec:
  type: NodePort
  selector:
    app: storage
  ports:
    - name: http
      port: 8080
---
# This ReplicaSet runs the local database stand-in. Not designed to be replicated.
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: database
  namespace: containerless
  labels:
    app: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
      - name: database
        image: localhost:32000/local-database
        imagePullPolicy: Always
        ports:
        - containerPort: $DATABASE_PORT
---
apiVersion: v1
kind: Service
metadata:
  name: database
  namespace: containerless
  labels:
    app: database
spec:
  type: NodePort
  selector:
    app: database
  ports:
    - name: http
      port: $DATABASE_PORT
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: containerless-ingress
  namespace: containerless
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
spec:
  rules:
  - http:
      paths:
        - path: /database(/|$)(.*)
          pathType: Exact
          backend:
            service:
              name: database
              port:
                name: http
        - path: /storage(/|$)(.*)
          pathType: Exact
          backend:
            service:
              name: storage
              port:
                name: http
        - path: /controller(/|$)(.*)
          pathType: Exact
          backend:
            service:
              name: controller
              port:
                name: http
        - path: /controller-logger(/|$)(.*)
          pathType: Exact
          backend:
            service:
              name: controller-logger
              port:
                name: http
---
# This pod echos the controller's log to its own standard output, so that
# it appears in the Kubernetes log.
apiVersion: v1
kind: Pod
metadata:
  name: controller-logger
  namespace: containerless
  labels:
    app: controller-logger
spec:
  containers:
  - name: controller-logger
    image: localhost:32000/controller-logger
    ports:
     - containerPort: 80
  terminationGracePeriodSeconds: 1    
---
# This service exposes the controller logging pod as http://controller-logger
# within the cluster.
apiVersion: v1
kind: Service
metadata:
  name: controller-logger
  namespace: containerless
  labels:
    app: controller-logger
spec:
  type: NodePort
  selector:
    app: controller-logger
  ports:
    - name: http
      port: 80
---
# This is a service that is exposed to the nodes that run Containerless.
apiVersion: v1
kind: Service
metadata:
  name: exposed-dispatcher
  namespace: containerless
spec:
  ports:
    - port: 8080
  selector:
    app: dispatcher
  type: LoadBalancer
