#![allow(non_snake_case)]
#![allow(unused_variables)]
#![forbid(unsafe_code)]
#![allow(unused_imports)]
use invoker::trace_runtime::{self as rt, Dyn, DynResult, ExecutionContext};
pub fn containerless<'a>(
    arena: &'a bumpalo::Bump,
    ec: &mut ExecutionContext<'a>,
    arg_cbid: Dyn<'a>,
    arg_cbargs: Dyn<'a>,
) -> DynResult<'a> {
    Ok(if (arg_cbid).strict_eq(Dyn::int(1i32))?.into() {
        let clos = Dyn::ref_(arena, (arg_cbargs).index(arena, Dyn::int(0i32))?);
        let request = Dyn::ref_(arena, (arg_cbargs).index(arena, Dyn::int(1i32))?);
        {
            let l = 'ret: loop {
                let req = Dyn::ref_(arena, Dyn::deref(request));
                let arr00 = Dyn::ref_(arena, Dyn::deref(req).get("body")?.get("arr")?);
                let count00 = Dyn::ref_(arena, Dyn::float(0f64));
                let i00 = Dyn::ref_(arena, Dyn::float(0f64));
                let _ = 'loop_break0: loop {
                    break 'loop_break0 {
                        while ((Dyn::deref(i00)).lt(Dyn::deref(arr00).get("length")?)?).into() {
                            ec.count()?;
                            let _ = 'loop_continue0: loop {
                                break 'loop_continue0 count00
                                    .setref((Dyn::deref(count00)).add(arena, Dyn::float(1f64))?)?;
                            };
                            i00.setref((Dyn::deref(i00)).add(arena, Dyn::float(1f64))?)?;
                        }
                        Dyn::undef()
                    };
                };
                let app1 = Dyn::ref_(arena, { ec.send(Dyn::deref(count00))? });
                break 'ret Dyn::undef();
            };
            l
        }
    } else {
        {
            let fun0 = Dyn::ref_(arena, Dyn::object_with(arena, vec![]));
            let app0 = Dyn::ref_(arena, {
                ec.loopback("listen", Dyn::float(0f64), Dyn::deref(fun0), 1i32)?
            });
            Dyn::undef()
        }
    })
}
