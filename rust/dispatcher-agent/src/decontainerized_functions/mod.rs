use dispatcher_agent_lib :: trace_runtime :: Containerless ; use std :: collections :: HashMap ; mod function_fortest ; mod function_andbug ; mod function_frivolousif ; mod function_elsebeforeif ; mod function_maze ; mod function_autocomplete ; mod function_trivialfixedresponse ; mod function_whiletest ; mod function_yay ; mod function_makeadder ; mod function_arraypop ; mod function_nestedbinops ; mod function_crazymakeadder ; mod function_loops ; pub fn init ( ) -> HashMap < & 'static str , Containerless > { let mut ht : HashMap < & 'static str , Containerless > = HashMap :: new ( ) ; ht . insert ( "fortest" , function_fortest :: containerless ) ; ht . insert ( "andbug" , function_andbug :: containerless ) ; ht . insert ( "frivolousif" , function_frivolousif :: containerless ) ; ht . insert ( "elsebeforeif" , function_elsebeforeif :: containerless ) ; ht . insert ( "maze" , function_maze :: containerless ) ; ht . insert ( "autocomplete" , function_autocomplete :: containerless ) ; ht . insert ( "trivialfixedresponse" , function_trivialfixedresponse :: containerless ) ; ht . insert ( "whiletest" , function_whiletest :: containerless ) ; ht . insert ( "yay" , function_yay :: containerless ) ; ht . insert ( "makeadder" , function_makeadder :: containerless ) ; ht . insert ( "arraypop" , function_arraypop :: containerless ) ; ht . insert ( "nestedbinops" , function_nestedbinops :: containerless ) ; ht . insert ( "crazymakeadder" , function_crazymakeadder :: containerless ) ; ht . insert ( "loops" , function_loops :: containerless ) ; return ht ; }